{"version":3,"file":"uniqolor.min.js","sources":["../src/index.js"],"sourcesContent":["const SATURATE_BOUND = [0, 100];\nconst LIGHTNESS_BOUND = [0, 100];\n\nconst pad2 = str => `${str.length === 1 ? '0' : ''}${str}`;\n\nconst clamp = (num, min, max) => Math.max(Math.min(num, max), min);\n\nconst random = (min, max) => Math.floor(Math.random() * ((max - min) + 1)) + min;\n\n/**\n * Generate hashCode\n * @param  {string} str\n * @return {number}\n */\nconst hashCode = str => {\n  const len = str.length;\n  let hash = 0;\n\n  for (let i = 0; i < len; i++) {\n    hash = ((hash << 5) - hash) + str.charCodeAt(i);\n    hash &= hash; // Convert to 32bit integer\n  }\n\n  return hash;\n};\n\n/**\n* Clamps `num` within the inclusive `range` bounds\n* @param  {number}       num\n* @param  {number|Array} range\n* @return {number}\n*/\nconst boundHashCode = (num, range) => {\n  if (typeof range === 'number') {\n    return range;\n  }\n\n  return (num % Math.abs(range[1] - range[0])) + range[0];\n};\n\n/**\n * Sanitizing the `range`\n * @param  {number|Array} range\n * @param  {Array}        bound\n * @return {number|Array}\n */\nconst sanitizeRange = (range, bound) => {\n  if (typeof range === 'number') {\n    return clamp(Math.abs(range), ...bound);\n  } else if (range.length === 1) {\n    return clamp(Math.abs(range[0]), ...bound);\n  }\n\n  return [\n    Math.abs(clamp(range[0], ...bound)),\n    clamp(Math.abs(range[1]), ...bound),\n  ];\n};\n\n/**\n * @param  {number} p\n * @param  {number} q\n * @param  {number} t\n * @return {number}\n */\nconst hueToRgb = (p, q, t) => {\n  if (t < 0) {\n    t += 1;\n  } else if (t > 1) {\n    t -= 1;\n  }\n\n  if (t < 1 / 6) {\n    return p + ((q - p) * 6 * t);\n  } else if (t < 1 / 2) {\n    return q;\n  } else if (t < 2 / 3) {\n    return p + ((q - p) * ((2 / 3) - t) * 6);\n  }\n\n  return p;\n};\n\n/**\n * Converts an HSL color to RGB\n * @param  {number} h Hue\n * @param  {number} s Saturation\n * @param  {number} l Lightness\n * @return {Array}\n */\nconst hslToRgb = (h, s, l) => {\n  let r;\n  let g;\n  let b;\n\n  h /= 360;\n  s /= 100;\n  l /= 100;\n\n  if (s === 0) {\n    // achromatic\n    r = g = b = l;\n  } else {\n    const q = l < 0.5\n      ? l * (1 + s)\n      : (l + s) - (l * s);\n    const p = (2 * l) - q;\n\n    r = hueToRgb(p, q, h + (1 / 3));\n    g = hueToRgb(p, q, h);\n    b = hueToRgb(p, q, h - (1 / 3));\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n};\n\n/**\n * Determines whether the RGB color is light or not\n * http://www.w3.org/TR/AERT#color-contrast\n * @param  {number}  r Red\n * @param  {number}  g Green\n * @param  {number}  b Blue\n * @return {boolean}\n */\nconst rgbIsLight = (r, g, b) => ((r * 299) + (g * 587) + (b * 114)) / 1000 >= 125;\n\n/**\n * Converts an HSL color to string format\n * @param  {number} h Hue\n * @param  {number} s Saturation\n * @param  {number} l Lightness\n * @return {string}\n */\nconst hslToString = (h, s, l) => `hsl(${h}, ${s}%, ${l}%)`;\n\n/**\n * Converts RGB color to string format\n * @param  {number}  r      Red\n * @param  {number}  g      Green\n * @param  {number}  b      Blue\n * @param  {string}  format Color format\n * @return {string}\n */\nconst rgbFormat = (r, g, b, format) => {\n  switch (format) {\n    case 'rgb':\n      return `rgb(${r}, ${g}, ${b})`;\n    case 'hex':\n    default:\n      return `#${pad2(r.toString(16))}${pad2(g.toString(16))}${pad2(b.toString(16))}`;\n  }\n};\n\n/**\n * Generate unique color from `value`\n * @param  {string|number} value\n * @param  {Object}        [options={}]\n * @param  {string}        [options.format='hex']\n *  The color format, it can be one of `hex`, `rgb` or `hsl`\n * @param  {number|Array}  [options.saturateRange=[50, 55]]\n *  Determines the color saturate, it can be a number or a range between 0 and 100\n * @param  {number|Array}  [options.lightnessRange=[50, 60]]\n *  Determines the color lightness, it can be a number or a range between 0 and 100\n * @return {Object}\n * @example\n *\n * uniqolor('Hello world!')\n * // { color: \"#5cc653\", isLight: true }\n *\n * uniqolor('Hello world!', { format: 'rgb' })\n * // { color: \"rgb(92, 198, 83)\", isLight: true }\n *\n * uniqolor('Hello world!', {\n *   saturateRange: 30,\n *   lightnessRange: [70, 80],\n * })\n * // { color: \"#afd2ac\", isLight: true }\n */\nconst uniqolor = (value, {\n  format = 'hex',\n  saturateRange = [50, 55],\n  lightnessRange = [50, 60],\n} = {}) => {\n  const hash = Math.abs(hashCode(String(value)));\n  const h = boundHashCode(hash, [0, 360]);\n  const s = boundHashCode(hash, sanitizeRange(saturateRange, SATURATE_BOUND));\n  const l = boundHashCode(hash, sanitizeRange(lightnessRange, LIGHTNESS_BOUND));\n  const [r, g, b] = hslToRgb(h, s, l);\n\n  return {\n    color: format === 'hsl'\n      ? hslToString(h, s, l)\n      : rgbFormat(r, g, b, format),\n    isLight: rgbIsLight(r, g, b),\n  };\n};\n\n/**\n * Generate random color\n * @param  {Object}       [options={}]\n * @param  {string}       [options.format='hex']\n *  The color format, it can be one of `hex`, `rgb` or `hsl`\n * @param  {number|Array} [options.saturateRange=[50, 55]]\n *  Determines the color saturate, it can be a number or a range between 0 and 100\n * @param  {number|Array} [options.lightnessRange=[50, 60]]\n *  Determines the color lightness, it can be a number or a range between 0 and 100\n * @return {Object}\n * @example\n *\n * uniqolor.random()\n * // { color: \"#644cc8\", isLight: false }\n *\n * uniqolor.random({ format: 'rgb' })\n * // { color: \"rgb(195, 65, 126)\", isLight: false }\n *\n * uniqolor.random({\n *   saturateRange: 30,\n *   lightnessRange: [70, 80],\n * })\n * // { color: \"#c7b9da\", isLight: true }\n */\nuniqolor.random = ({\n  format = 'hex',\n  saturateRange = [50, 55],\n  lightnessRange = [50, 60],\n} = {}) => {\n  saturateRange = sanitizeRange(saturateRange, SATURATE_BOUND);\n  lightnessRange = sanitizeRange(lightnessRange, LIGHTNESS_BOUND);\n\n  const h = random(0, 360);\n  const s = typeof saturateRange === 'number'\n    ? saturateRange\n    : random(...saturateRange);\n  const l = typeof lightnessRange === 'number'\n    ? lightnessRange\n    : random(...lightnessRange);\n  const [r, g, b] = hslToRgb(h, s, l);\n\n  return {\n    color: format === 'hsl'\n      ? hslToString(h, s, l)\n      : rgbFormat(r, g, b, format),\n    isLight: rgbIsLight(r, g, b),\n  };\n};\n\nexport default uniqolor;\n\n"],"names":["SATURATE_BOUND","LIGHTNESS_BOUND","pad2","str","length","clamp","num","min","max","Math","random","floor","hashCode","len","hash","i","charCodeAt","boundHashCode","range","abs","sanitizeRange","bound","hueToRgb","p","q","t","hslToRgb","h","s","l","r","g","b","round","rgbIsLight","hslToString","rgbFormat","format","toString","uniqolor","value","saturateRange","lightnessRange","String"],"mappings":"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"}